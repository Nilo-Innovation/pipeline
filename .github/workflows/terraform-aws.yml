on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
    secrets:
      AWS_DEV_ACCOUNT_ID:
        required: true
      AWS_PROD_ACCOUNT_ID:
        required: true
      AWS_PIPELINE_ACCESS_KEY_ID:
        required: true
      AWS_PIPELINE_SECRET_ACCESS_KEY:
        required: true
      PACKAGE_USERNAME:
        required: true
      PACKAGE_TOKEN:
        required: true

env:
  BUILD_SHA: ${{ github.sha }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PIPELINE_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PIPELINE_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  ROLE_DURATION_SECONDS: 1200
  AWS_DEFAULT_OUTPUT: json
  AWS_DEPLOYMENT_ROLE: pipeline
  ORGANIZATION: lineup
  SERVICE_NAME: ${{inputs.SERVICE_NAME}}
  


jobs:
  terraform:
    name: Deploy Infraestructure in AWS
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.terraform == 'true' }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set DEV environment variables
        if: github.ref == 'refs/heads/master'
        run: |
          echo "::set-env name=STAGE::dev"
          echo "::set-env name=DOCKER_BUILD_TARGET::debug"
          echo "::set-env name=EKS_CLUSTER_NAME::dev-lineup-k8s-cluster"
          echo "::set-env name=AWS_ACCOUNT_ID::${{ secrets.AWS_DEV_ACCOUNT_ID }}"

      - name: Set PROD environment variables
        if: github.ref == 'refs/heads/prod'
        run: |
          echo "::set-env name=STAGE::prod"
          echo "::set-env name=DOCKER_BUILD_TARGET::debug"
          echo "::set-env name=EKS_CLUSTER_NAME::prod-lineup-k8s-cluster"
          echo "::set-env name=AWS_ACCOUNT_ID::${{ secrets.AWS_PROD_ACCOUNT_ID }}"

      - name: ðŸ”‘ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ format('arn:aws:iam::{0}:role/{1}', env.AWS_ACCOUNT_ID,env.AWS_DEPLOYMENT_ROLE) }}
          role-duration-seconds: ${{ env.ROLE_DURATION_SECONDS }}
        
      - name: Download file from S3 & Set up Variables
        run: |
          aws s3 ls
          aws s3 sync s3://lineup-terraform-dev  ./terraform
          sed -i "s/AWS_ACCESS_KEY_ID/${{ env.AWS_ACCESS_KEY_ID }}/g" ./terraform/terraform.tfvars
          sed -i "s/AWS_SECRET_ACCESS_KEY/${{ env.AWS_SECRET_ACCESS_KEY }}/g" ./terraform/terraform.tfvars
          sed -i "s/SERVICE_NAME/${{ env.SERVICE_NAME }}/g" ./terraform/terraform.tfvars
          sed -i "s/SERVICE_NAME/${{ env.SERVICE_NAME }}/g" ./terraform/variables.tf

      - name: Terraform Init
        uses: hashicorp/terraform-github-actions/init@v0.4.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: 'terraform'
          SERVICE_NAME: ${{ env.SERVICE_NAME }}

      - name: Terraform Validate
        uses: hashicorp/terraform-github-actions/validate@v0.3.7

      - name: Terraform Apply
        uses: hashicorp/terraform-github-actions/apply@v0.4.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TF_ACTION_WORKING_DIR: 'terraform'
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
  notify_slack:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Notify Slack on Failure
        if: failure()
        run: |
          curl -X POST --data-urlencode "payload={\"channel\": \"#github-actions\", \"username\": \"'${{ github.actor }}'\", \"text\": \"Workflow Infraestructure Deploy ${{ env.SERVICE_NAME }} failed! See details: '${{ github.workflow }}'.\"}" ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Notify Slack on Success
        if: success()
        run: |
          curl -X POST --data-urlencode "payload={\"channel\": \"#github-actions\", \"username\": \"'${{ github.actor }}'\", \"text\": \"Workflow Infraestructure Deploy ${{ env.SERVICE_NAME }} succeeded! See details: '${{ github.workflow }}'.\"}" ${{ secrets.SLACK_WEBHOOK_URL }}
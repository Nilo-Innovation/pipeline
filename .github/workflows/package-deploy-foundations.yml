on:
  workflow_call:
    secrets:
      TOKEN:
        required: true


env:
  BUILD_SHA: ${{ github.sha }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  PACKAGE_TYPE: "maven"
  ORG: "Nilo-Innovation"

jobs:
  obtener-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: ‚òï Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 11

      - name: üêò Stop Gradle Daemon(s)
        uses: eskatos/gradle-command-action@v1
        with:
          arguments: --stop
          gradle-version: 7.4.2

      - name: Obtener la versi√≥n m√°s reciente del paquete para cada servicio lineup-
        run: |
          for dir in $(find . -type d -name 'lineup-*'); do
            SERVICE_NAME=$(basename "$dir")
            PACKAGE_NAME="com.lineup.foundations.${SERVICE_NAME}"
            
            echo "Buscando la versi√≥n m√°s reciente del paquete: $PACKAGE_NAME"
            
            VERSION=$(curl -L \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "https://api.github.com/orgs/${{ env.ORG }}/packages/${{ env.PACKAGE_TYPE }}/${PACKAGE_NAME}/versions" | jq -r '.[0].name' | tr -d '"' | tr -d ',' | tr -d '\n' | xargs)
            
            GIT_VERSION=$(echo "$VERSION")
            echo "La versi√≥n reciente del paquete para $PACKAGE_NAME es: $GIT_VERSION"
            echo "PACKAGE_VERSION_SERVICE_NAME=$GIT_VERSION" >> $GITHUB_ENV
          done

      - name: Leer versi√≥n de build.gradle.kts en directorios que comienzan con 'lineup-'
        id: gradle_version
        run: |
          for dir in $(find . -type f -name 'build.gradle.kts' -path './lineup-*' -exec dirname {} \;); do
            echo "Entrando al directorio $dir"
            GRADLE_VERSION=$(grep 'version =' $dir/build.gradle.kts | sed "s/version = //g" | tr -d '"' | tr -d ',' | xargs)
            G_VERSION=$(echo "$GRADLE_VERSION")
            echo "Versi√≥n en $dir/build.gradle.kts: $G_VERSION"
            echo "gradle_version_$dir=$G_VERSION" >> $GITHUB_ENV
          done

      - name: Comparar versiones y publicar artefactos en directorios que comienzan con 'lineup-'
        run: |
          for dir in $(find . -type f -name 'build.gradle.kts' -path './lineup-*' -exec dirname {} \;); do
            echo "Comparando versiones en $dir"
            PACKAGE_VERSION_SERVICE_NAME=$(grep 'version =' ./path/to/package/version/file | sed "s/version = //g" | tr -d '"' | tr -d ',' | xargs)
            gradle_version=$(eval echo "\$gradle_version_$dir")

            if [ "$(printf '%s\n' "$PACKAGE_VERSION_SERVICE_NAME" "$gradle_version" | sort -V | head -n1)" = "$PACKAGE_VERSION_SERVICE_NAME" ] && [ "$PACKAGE_VERSION_SERVICE_NAME" != "$gradle_version" ]; then
              echo "La versi√≥n gradle_version es mayor que $PACKAGE_VERSION_SERVICE_NAME en $dir. Desplegando artefacto al Package Registry..."
              
              cd $dir
              ./gradlew clean
              ./gradlew build
              ./gradlew publish
              cd -
              
            elif [ "$PACKAGE_VERSION_SERVICE_NAME" = "$gradle_version" ]; then
              echo "Las versiones coinciden en $dir. No se desplegar√° artefacto al Package Registry."
            else
              echo "La versi√≥n gradle_version es menor que PACKAGE_VERSION en $dir. No se desplegar√° artefacto al Package Registry."
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
          GITHUB_USERNAME: bgarridop

      # - name: Notify Slack on Failure
      #   if: failure()
      #   run: |
      #     curl -X POST --data-urlencode "payload={\"channel\": \"#pipeline-notifications\", \"username\": \"'${{ github.actor }}'\", \"text\": \"Artefact deploy ${{ env.SERVICE_NAME }} failed! See details: '${{ github.workflow }} - https://github.com/Nilo-Innovation/${{ env.SERVICE_NAME }}/actions'.\"}" ${{ secrets.SLACK_WEBHOOK_URL }}
      # - name: Notify Slack on Success
      #   if: success()
      #   run: |
      #     curl -X POST --data-urlencode "payload={\"channel\": \"#pipeline-notifications\", \"username\": \"'${{ github.actor }}'\", \"text\": \"Artefact deploy ${{ env.SERVICE_NAME }} succeeded (validate if you uploaded or found a match.)! See details: '${{ github.workflow }} - https://github.com/Nilo-Innovation/${{ env.SERVICE_NAME }}/actions'.\"}" ${{ secrets.SLACK_WEBHOOK_URL }}
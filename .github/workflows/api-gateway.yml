on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
    secrets:
      AWS_DEV_ACCOUNT_ID:
        required: true
      AWS_PROD_ACCOUNT_ID:
        required: true
      AWS_PIPELINE_ACCESS_KEY_ID:
        required: true
      AWS_PIPELINE_SECRET_ACCESS_KEY:
        required: true
      PACKAGE_USERNAME:
        required: true
      PACKAGE_TOKEN:
        required: true

env:
  BUILD_SHA: ${{ github.sha }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PIPELINE_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PIPELINE_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  ROLE_DURATION_SECONDS: 1200
  AWS_DEFAULT_OUTPUT: json
  AWS_DEPLOYMENT_ROLE: pipeline
  ORGANIZATION: lineup
  SERVICE_NAME: ${{inputs.SERVICE_NAME}}

jobs:
  apigateway:
    name: Inject DNS and Deploy AWS
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.apigateway == 'true' }}
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - uses: actions/checkout@v2
      - name: Set DEV environment variables
        if: github.ref == 'refs/heads/master'
        run: |
          echo "::set-env name=STAGE::dev"
          echo "::set-env name=AWS_ACCOUNT_ID::${{ secrets.AWS_DEV_ACCOUNT_ID }}"
          echo "::set-env name=DNS::https://dev.lineupapp.digital/${{ env.SERVICE_NAME }}/v3/api-docs/access-service"
      - name: Set PROD environment variables
        if: github.ref == 'refs/heads/prod'
        run: |
          echo "::set-env name=STAGE::prod"
          echo "::set-env name=AWS_ACCOUNT_ID::${{ secrets.AWS_PROD_ACCOUNT_ID }}"
          echo "::set-env name=DNS::https://lineupapp.digital/${{ env.SERVICE_NAME }}/v3/api-docs/access-service"
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download Swagger YAML
        run: |
          cd apigateway && curl -o swagger.json ${{ env.DNS }}
      - name: ðŸ”‘ Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ format('arn:aws:iam::{0}:role/{1}', env.AWS_ACCOUNT_ID,env.AWS_DEPLOYMENT_ROLE) }}
          role-duration-seconds: ${{ env.ROLE_DURATION_SECONDS }}
      - name: API Gateway
        run: |
          aws apigateway import-rest-api --fail-on-warnings --body "file:apigateway/swagger.json"
          API_ID=$(aws apigateway get-rest-apis --query "items[?name=='${{ env.SERVICE_NAME }}'].id" --output text)
          aws apigateway create-deployment --rest-api-id "$API_ID" --stage-name "${{ env.STAGE }}"
  notify_slack:
    runs-on: ubuntu-latest
    needs: apigateway
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Notify Slack on Failure
        if: failure()
        run: |
          curl -X POST --data-urlencode "payload={\"channel\": \"#github-actions\", \"username\": \"'${{ github.actor }}'\", \"text\": \"Workflow API-Gateway Deploy ${{ env.SERVICE_NAME }} failed! See details: '${{ github.workflow }}'.\"}" ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Notify Slack on Success
        if: success()
        run: |
          curl -X POST --data-urlencode "payload={\"channel\": \"#github-actions\", \"username\": \"'${{ github.actor }}'\", \"text\": \"Workflow API-Gateway Deploy ${{ env.SERVICE_NAME }} succeeded! See details: '${{ github.workflow }}'.\"}" ${{ secrets.SLACK_WEBHOOK_URL }}
on:
  workflow_call:
    secrets:
      AWS_DEV_ACCOUNT_ID:
        required: true
      AWS_QA_ACCOUNT_ID:
        required: true
      AWS_PROD_ACCOUNT_ID:
        required: true
      AWS_PIPELINE_ACCESS_KEY_ID:
        required: true
      AWS_PIPELINE_SECRET_ACCESS_KEY:
        required: true
      PACKAGE_USERNAME:
        required: true
      PACKAGE_TOKEN:
        required: true

env:
  BUILD_SHA: ${{ github.sha }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  AWS_REGION: us-east-1
  ROLE_DURATION_SECONDS: 3600
  AWS_DEFAULT_OUTPUT: json
  AWS_DEPLOYMENT_ROLE: pipeline
  ORGANIZATION: lineup
  GITHUB_USERNAME: ${{ secrets.PACKAGE_USERNAME }}
  GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PIPELINE_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PIPELINE_SECRET_ACCESS_KEY }}

jobs:
  deploy:
    name: Deploy Serveless
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    - name: Set DEV environment variables
      if: github.ref == 'refs/heads/dev'
      run: |
        echo "::set-env name=STAGE::dev"
        echo "::set-env name=AWS_ACCOUNT_ID::${{ secrets.AWS_DEV_ACCOUNT_ID }}"
    - name: Set QA environment variables
      if: github.ref == 'refs/heads/qa'
      run: |
        echo "::set-env name=STAGE::qa"
        echo "::set-env name=AWS_ACCOUNT_ID::${{ secrets.AWS_QA_ACCOUNT_ID }}"
    - name: Set PROD environment variables
      if: github.ref == 'refs/heads/prod'
      run: |
        echo "::set-env name=STAGE::prod"
        echo "::set-env name=AWS_ACCOUNT_ID::${{ secrets.AWS_PROD_ACCOUNT_ID }}"
    - name: üîë Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ format('arn:aws:iam::{0}:role/{1}', env.AWS_ACCOUNT_ID,env.AWS_DEPLOYMENT_ROLE) }}
        role-duration-seconds: ${{ env.ROLE_DURATION_SECONDS }}
    - uses: actions/checkout@v4

    # ---------- Detectar versi√≥n de Python en serverless.yml ----------
    - name: Detect Python runtime
      id: detect_py
      run: |
        PY_LINE=$(grep -E '^[[:space:]]*runtime:[[:space:]]*python' serverless.yml | head -1)
        PY_VERSION=${PY_LINE##*python}
        echo "python_version=$PY_VERSION" >> "$GITHUB_OUTPUT"

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.detect_py.outputs.python_version }}

    # ---------- Instalar dependencias de Python ----------
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # ---------- Comprobaci√≥n de Python (diagn√≥stico) ----------
    - name: üîç Comprobaci√≥n Python
      run: |
        echo "PATH -> $PATH"
        which python${{ steps.detect_py.outputs.python_version }}  || echo "‚ùå python${{ steps.detect_py.outputs.python_version }} NO encontrado"
        python${{ steps.detect_py.outputs.python_version }} -V      || true

    - uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install Serverless v3 + plugin
      run: |
        npm install -g serverless@^3
        npx serverless plugin install -n serverless-python-requirements
    - name: Deploy con Serverless CLI
      run: |
        npx serverless deploy -s ${{ env.STAGE }} --force
on:
  workflow_call:
    secrets:
      AWS_DEV_ACCOUNT_ID:
        required: true
      AWS_PROD_ACCOUNT_ID:
        required: true
      AWS_PIPELINE_ACCESS_KEY_ID:
        required: true
      AWS_PIPELINE_SECRET_ACCESS_KEY:
        required: true
      PACKAGE_USERNAME:
        required: true
      PACKAGE_TOKEN:
        required: true

env:
  BUILD_SHA: ${{ github.sha }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PIPELINE_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PIPELINE_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  ROLE_DURATION_SECONDS: 1200
  AWS_DEFAULT_OUTPUT: json
  AWS_DEPLOYMENT_ROLE: pipeline
  ORGANIZATION: lineup

jobs:
  build:
    name: Build Gradlew
    runs-on: ubuntu-latest
    steps:
    - name: Checkout project sources
      uses: actions/checkout@v2
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    - name: Run build with Gradle Wrapper
      run: ./gradlew build
  deploy:
    name: Deploy Serveless
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - name: Some check on branch
      id: branch_check
      run: |
        echo "Running on branch ${{ github.ref }}"
        if [ "${{ github.ref }}" = "refs/heads/prod" ]; then
          echo "::set-output name=env_name::Production"
        elif [ "${{ github.ref }}" = "refs/heads/master" ]; then
          echo "::set-output name=env_name::Desarrollo"
        else
            echo "::set-output name=env_name::Features"
        fi         
        
    - name: Use variable setup in previous step
      run: echo "I'm using variable ${{ steps.branch_check.outputs.env_name }}"
  outputs:
    env_name: ${{ steps.branch_check.outputs.env_name }}
    - name: serveless deploy
      uses: serverless/github-action@v3.1
      environment: 
        name: ${{ needs.build.outputs.env_name }}
      with:
        args: -c "cd ./ && serverless deploy"
        entrypoint: /bin/sh
          

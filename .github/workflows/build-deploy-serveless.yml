on:
  workflow_call:
    secrets:
      AWS_DEV_ACCOUNT_ID:
        required: true
      AWS_PROD_ACCOUNT_ID:
        required: true
      AWS_PIPELINE_ACCESS_KEY_ID:
        required: true
      AWS_PIPELINE_SECRET_ACCESS_KEY:
        required: true
      PACKAGE_USERNAME:
        required: true
      PACKAGE_TOKEN:
        required: true

env:
  BUILD_SHA: ${{ github.sha }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  AWS_REGION: us-east-1
  ROLE_DURATION_SECONDS: 1200
  AWS_DEFAULT_OUTPUT: json
  AWS_DEPLOYMENT_ROLE: pipeline
  ORGANIZATION: lineup
  GITHUB_USERNAME: ${{ secrets.PACKAGE_USERNAME }}
  GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PIPELINE_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PIPELINE_SECRET_ACCESS_KEY }}

jobs:
  build:
    name: Build Gradlew
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 11
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
    
    - name: Execute Gradle build
      run: |
        ./gradlew build
    - uses: actions/cache@v3
      with: 
        path: build/libs/app.jar
        key: ${{ runner.os }}-gradlew-${{  env.SERVICE_NAME  }}-${{ github.sha }}
  deploy:
    name: Deploy Serveless
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
    - name: Set DEV environment variables
      if: github.ref == 'refs/heads/master'
      #env:
        #Agregar variables DEV
      run: |
        echo "::set-env name=STAGE::dev"
        echo "::set-env name=AWS_ACCOUNT_ID::${{ secrets.AWS_DEV_ACCOUNT_ID }}"
    - name: Set PROD environment variables
      if: github.ref == 'refs/heads/prod'
      #env:
        #Agregar variables PROD
      run: |
        echo "::set-env name=STAGE::prod"
        echo "::set-env name=AWS_ACCOUNT_ID::${{ secrets.AWS_PROD_ACCOUNT_ID }}"
    - name: ðŸ”‘ Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ format('arn:aws:iam::{0}:role/{1}', env.AWS_ACCOUNT_ID,env.AWS_DEPLOYMENT_ROLE) }}
        role-duration-seconds: ${{ env.ROLE_DURATION_SECONDS }}
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Cache Restore
      uses: actions/cache@v3
      with:
        path: build/libs/app.jar
        key: ${{ runner.os }}-gradlew-${{ github.event.repository.name }}-${{ github.sha }}
    - name: serverless deploy
      uses: serverless/github-action@v3.1
      with:
        args: deploy
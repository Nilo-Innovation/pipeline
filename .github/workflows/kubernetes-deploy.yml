on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
      SERVICE_PORT:
        required: true
        type: string
      PATH_SERVICE:
        required: false
        type: string
    secrets:
      AWS_DEV_ACCOUNT_ID:
        required: true
      AWS_QA_ACCOUNT_ID:
        required: true
      ALB_DEV:
        required: true
      ALB_QA:
        required: true
      ALB_PROD:
        required: true
      DEV_KUBE_CONFIG_DATA:
        required: true
      QA_KUBE_CONFIG_DATA:
        required: true
      AWS_PROD_ACCOUNT_ID:
        required: true
      PROD_KUBE_CONFIG_DATA:
        required: true
      AWS_PIPELINE_ACCESS_KEY_ID:
        required: true
      AWS_PIPELINE_SECRET_ACCESS_KEY:
        required: true
      PACKAGE_USERNAME:
        required: true
      PACKAGE_TOKEN:
        required: true
      NEWRELIC:
        required: true
      VPC_CIDR_DEV:
        required: true
      VPC_CIDR_QA:
        required: true
      VPC_CIDR_PROD:
        required: true

env:
  BUILD_SHA: ${{ github.sha }}
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_PIPELINE_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_PIPELINE_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  ROLE_DURATION_SECONDS: 1200
  AWS_DEFAULT_OUTPUT: json
  AWS_DEPLOYMENT_ROLE: pipeline
  ORGANIZATION: lineup
  SERVICE_NAME: ${{inputs.SERVICE_NAME}}
  SERVICE_PORT: ${{inputs.SERVICE_PORT}}
  NEWRELIC: ${{ secrets.NEWRELIC }}

jobs:
  deploy_services:
    name: Deploy micro-service to EKS
    #runs-on: [self-hosted, prod]
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - uses: actions/checkout@v4
      - name: Set DEV environment variables
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/master'
        env:
          JAVA_OPTS: "-Xmx300m -Xms250m -XX:MaxMetaspaceSize=200m -XX:MetaspaceSize=130m -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps  -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=1m -Xloggc:/var/log/containers/gc-%t.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/containers"
        run: |
          echo "::set-env name=STAGE::dev"
          echo "::set-env name=NEWRELIC_STAGE::development"
          echo "::set-env name=DOCKER_BUILD_TARGET::debug"
          echo "::set-env name=EKS_CLUSTER_NAME::dev-lineup-k8s-cluster"
          echo "::set-env name=AWS_ACCOUNT_ID::${{ secrets.AWS_DEV_ACCOUNT_ID }}"
          echo "::set-env name=EKS_KUBE_CONFIG_DATA::${{ secrets.DEV_KUBE_CONFIG_DATA }}"
          echo "::set-env name=ALB::${{ secrets.ALB_DEV }}"
          echo "::set-env name=NEWRELIC::${{ secrets.NEWRELIC }}"
          echo "::set-env name=VPC_CIDR::${{ secrets.VPC_CIDR_DEV }}"
          echo "::set-env name=HPA_MIN_REPLICAS::1"
          echo "::set-env name=HPA_MAX_REPLICAS::2"
          echo "::set-env name=HPA_SD_WINDOW::180"
          echo "::set-env name=HPA_SU_WINDOW::180"
          echo "::set-env name=HPA_SD_PERCENT::50"
          echo "::set-env name=HPA_SU_PERCENT::50"
          echo "::set-env name=HPA_CPU_TARGET::80"
          echo "::set-env name=XMX::384m"
          echo "::set-env name=XMS::384m"
          echo "::set-env name=MAX_METASPACE::160m"
          echo "::set-env name=REQ_CPU=100m"
          echo "::set-env name=REQ_MEM=512Mi"
          echo "::set-env name=LIM_MEM=768Mi"
      - name: Set QA environment variables
        if: github.ref == 'refs/heads/qa'
        env:
          JAVA_OPTS: "-Xmx300m -Xms250m -XX:MaxMetaspaceSize=200m -XX:MetaspaceSize=130m -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps  -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=1m -Xloggc:/var/log/containers/gc-%t.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/containers"
        run: |
          echo "::set-env name=STAGE::qa"
          echo "::set-env name=NEWRELIC_STAGE::staging"
          echo "::set-env name=DOCKER_BUILD_TARGET::debug"
          echo "::set-env name=EKS_CLUSTER_NAME::qa-lineup-k8s-cluster"
          echo "::set-env name=AWS_ACCOUNT_ID::${{ secrets.AWS_QA_ACCOUNT_ID }}"
          echo "::set-env name=EKS_KUBE_CONFIG_DATA::${{ secrets.QA_KUBE_CONFIG_DATA }}"
          echo "::set-env name=ALB::${{ secrets.ALB_QA }}"
          echo "::set-env name=NEWRELIC::${{ secrets.NEWRELIC }}"
          echo "::set-env name=VPC_CIDR::${{ secrets.VPC_CIDR_QA }}"
          echo "::set-env name=HPA_MIN_REPLICAS::1"
          echo "::set-env name=HPA_MAX_REPLICAS::3"
          echo "::set-env name=HPA_SD_WINDOW::240"
          echo "::set-env name=HPA_SU_WINDOW::180"
          echo "::set-env name=HPA_SD_PERCENT::50"
          echo "::set-env name=HPA_SU_PERCENT::50"
          echo "::set-env name=HPA_CPU_TARGET::70"
          echo "::set-env name=XMX::512m"
          echo "::set-env name=XMS::512m"
          echo "::set-env name=MAX_METASPACE::192m"
          echo "::set-env name=REQ_CPU=200m"
          echo "::set-env name=REQ_MEM=768Mi"
          echo "::set-env name=LIM_MEM=1024Mi"

      - name: Set PROD environment variables
        if: github.ref == 'refs/heads/prod'
        env:
          JAVA_OPTS: "-Xmx300m -Xms250m -XX:MaxMetaspaceSize=200m -XX:MetaspaceSize=130m -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps  -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=1m -Xloggc:/var/log/containers/gc-%t.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/var/log/containers"
        run: |
          echo "::set-env name=STAGE::prod"
          echo "::set-env name=NEWRELIC_STAGE::production"
          echo "::set-env name=DOCKER_BUILD_TARGET::debug"
          echo "::set-env name=EKS_CLUSTER_NAME::prod-lineup-k8s-cluster"
          echo "::set-env name=AWS_ACCOUNT_ID::${{ secrets.AWS_PROD_ACCOUNT_ID }}"
          echo "::set-env name=EKS_KUBE_CONFIG_DATA::${{ secrets.PROD_KUBE_CONFIG_DATA }}"
          echo "::set-env name=ALB::${{ secrets.ALB_PROD }}"
          echo "::set-env name=NEWRELIC::${{ secrets.NEWRELIC }}"
          echo "::set-env name=VPC_CIDR::${{ secrets.VPC_CIDR_PROD }}"
          echo "::set-env name=HPA_MIN_REPLICAS::2"
          echo "::set-env name=HPA_MAX_REPLICAS::8"
          echo "::set-env name=HPA_SD_WINDOW::300"
          echo "::set-env name=HPA_SU_WINDOW::180"
          echo "::set-env name=HPA_SD_PERCENT::50"
          echo "::set-env name=HPA_SU_PERCENT::50"
          echo "::set-env name=HPA_CPU_TARGET::70"
          echo "::set-env name=HPA_MEM_TARGET::200"
          echo "::set-env name=XMX::700m"
          echo "::set-env name=XMS::700m"
          echo "::set-env name=MAX_METASPACE::300m"
          echo "::set-env name=REQ_CPU=256m"
          echo "::set-env name=REQ_MEM=1Gi"
          echo "::set-env name=LIM_MEM=1536Mi"

      - name: üîë Configure AWS Credentials
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/qa' || github.ref == 'refs/heads/prod'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ format('arn:aws:iam::{0}:role/{1}', env.AWS_ACCOUNT_ID,env.AWS_DEPLOYMENT_ROLE) }}
          role-duration-seconds: ${{ env.ROLE_DURATION_SECONDS }}
      - name: üîì Login to Amazon ECR
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/qa' || github.ref == 'refs/heads/prod'
        id: login-ecr-aws
        uses: aws-actions/amazon-ecr-login@v1
      - name: üìÑ Inject environment variables into kubernetes manifest
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/qa' || github.ref == 'refs/heads/prod'
        uses: nowactions/envsubst@v1
        with:
          input: ${{ format('./{0}/kubernetes.yml', env.SERVICE_NAME) }}
          output: ${{ format('./{0}/kubernetes.deployment.yml', env.SERVICE_NAME) }}
        env:
          LOGROTATE_IMAGE: ${{ format('{0}/lineup-logrotate:latest', steps.login-ecr-aws.outputs.registry) }}
          FLUENT_BIT_IMAGE: ${{ format('{0}/lineup-fluent-bit:latest', steps.login-ecr-aws.outputs.registry) }}
          IMAGE_TAG: ${{ format('{0}/{1}-{2}/{3}:latest', steps.login-ecr-aws.outputs.registry, env.STAGE, env.ORGANIZATION, env.SERVICE_NAME ) }}
      - name: üè¢ Deploy application load balancer to EKS
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/qa' || github.ref == 'refs/heads/prod'
        uses: Nilo-Innovation/eks-deploy-lineup@master
        env:
          KUBE_CONFIG_DATA: ${{ env.EKS_KUBE_CONFIG_DATA }}
          GITHUB_TOKEN: ${{ secrets.ACTION_TOKEN }}
        with:
          args: ${{ format('apply -f ./{0}/kubernetes.deployment.yml', env.SERVICE_NAME) }}
      - name: Checkout code
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/qa' || github.ref == 'refs/heads/prod'
        uses: actions/checkout@v4
      - name: Notify Slack on Failure
        if: failure()
        run: |
          curl -X POST --data-urlencode "payload={\"channel\": \"#pipeline-notifications\", \"username\": \"'${{ github.actor }}'\", \"text\": \"Workflow Kubernetes Deploy ${{ env.SERVICE_NAME }} failed! See details: '${{ github.workflow }} - https://github.com/Nilo-Innovation/${{ env.SERVICE_NAME }}/actions'.\"}" ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Notify Slack on Success
        if: success()
        run: |
          curl -X POST --data-urlencode "payload={\"channel\": \"#pipeline-notifications\", \"username\": \"'${{ github.actor }}'\", \"text\": \"Workflow Kubernetes Deploy ${{ env.SERVICE_NAME }} succeeded! See details: '${{ github.workflow }} - https://github.com/Nilo-Innovation/${{ env.SERVICE_NAME }}/actions'.\"}" ${{ secrets.SLACK_WEBHOOK_URL }}
